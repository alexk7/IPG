// This file was automatically generated by IPG on Tue Jul 19 14:38:04 2011
// (from /Users/alexk7/ipg/build/xcode/../../src/peg/peg.peg)
// DO NOT EDIT!
#ifndef BOOTSTRAP_TEST
#include <cassert>
#include <stdexcept>
#include <ostream>
#include <sstream>
#include <iomanip>
#include <boost/format.hpp>
#endif

#ifndef BOOTSTRAP_TEST
#include <vector>
#include <bitset>
#include <boost/shared_ptr.hpp>
#include <boost/unordered_map.hpp>
#endif

namespace PEGParser
{
	enum SymbolType
	{
		SymbolType_AND = 0,
		SymbolType_CLOSE = 1,
		SymbolType_Char = 2,
		SymbolType_Class = 3,
		SymbolType_Comment = 4,
		SymbolType_DOT = 5,
		SymbolType_Definition = 6,
		SymbolType_EndOfFile = 7,
		SymbolType_EndOfLine = 8,
		SymbolType_Expression = 9,
		SymbolType_Grammar = 10,
		SymbolType_Identifier = 11,
		SymbolType_LEFTARROW = 12,
		SymbolType_Literal = 13,
		SymbolType_NOT = 14,
		SymbolType_OPEN = 15,
		SymbolType_PLUS = 16,
		SymbolType_Prefix = 17,
		SymbolType_Primary = 18,
		SymbolType_QUESTION = 19,
		SymbolType_Range = 20,
		SymbolType_SLASH = 21,
		SymbolType_STAR = 22,
		SymbolType_Sequence = 23,
		SymbolType_Space = 24,
		SymbolType_Spacing = 25,
		SymbolType_Suffix = 26,
		SymbolTypeCount
	};

	typedef std::pair<SymbolType, const char*> Symbol;
	typedef std::vector<Symbol> Symbols;
	typedef std::bitset<SymbolTypeCount> SymbolTypeSet;
	typedef std::pair<SymbolTypeSet, const char*> MemoValue;
	typedef boost::unordered_multimap<const char*, MemoValue> MemoMap;

	const char* SymbolName(SymbolType _type);

	class Parser
	{
	public:
		const char* Parse(SymbolType _type, const char* _symbol);
		const char* Traverse(SymbolType _type, const char* _symbol, Symbols& _children);
		void Print(std::ostream& _os, SymbolType _type, const char* _pNode, int _tabs = 0, int _maxLineSize = 100);

	private:
		const char** GetEnd(SymbolType _type, const char* _pBegin);
		void SetEnd(SymbolType _type, const char* _pBegin, const char* _pEnd);
		const char* Visit(SymbolType _type, const char* _p, Symbols& _v);
		MemoMap memoMap;
	};

	class Iterator
	{
	public:
		Iterator(SymbolType _type, const char* _pNode = 0);
		Iterator(const Iterator& _iOther);
		operator bool() const;
		Iterator& operator++();
		SymbolType GetType() const;
		const char* Begin() const;
		const char* End() const;
		Iterator GetChild(SymbolType _childT);
		Iterator GetNext(SymbolType _childT);
		void Print(std::ostream& _os, int _tabs = 0, int _maxLineSize = 100);

	private:
		Iterator(boost::shared_ptr<Parser> _pParser, boost::shared_ptr<Symbols> _pSiblings, SymbolType _childType);
		Iterator(const Iterator& _iOther, SymbolType _childType);
		void GoToNext(SymbolType _childType);
		void SkipSiblingsWithWrongType(SymbolType _childType);
		boost::shared_ptr<Symbols> GetChildren();

		SymbolType mType;
		const char* mpNode;
		boost::shared_ptr<Symbols> mpSiblings;
		Symbols::iterator miCurrent;
		boost::shared_ptr<Symbols> mpChildren;
		boost::shared_ptr<Parser> mpParser;
	};

	std::ostream& operator<<(std::ostream& _os, const Iterator& _i);
}

namespace
{
	typedef PEGParser::MemoMap::value_type Memo;
	typedef PEGParser::MemoMap::iterator MemoIterator;
	typedef std::pair<MemoIterator, MemoIterator> MemoRange;

	struct EscapeChar
	{
		EscapeChar(char _c);
		char c;
	};

	EscapeChar::EscapeChar(char _c) : c(_c)
	{
	}

	std::ostream& operator<<(std::ostream& _os, EscapeChar _e)
	{
		char c = _e.c;
		switch (c)
		{
			case '\\': c = '\\'; break;
			case '\n': c = 'n';  break;
			case '\r': c = 'r';  break;
			case '\t': c = 't';  break;
			case '\'': c = '\''; break;
			case '\"': c = '\"'; break;
			default:
				_os.put(c);
				return _os;
		}
		_os.put('\\');
		_os.put(c);
		return _os;
	}
}

const char* PEGParser::SymbolName(PEGParser::SymbolType _type)
{
	switch (_type)
	{
		case SymbolType_AND: return "AND";
		case SymbolType_CLOSE: return "CLOSE";
		case SymbolType_Char: return "Char";
		case SymbolType_Class: return "Class";
		case SymbolType_Comment: return "Comment";
		case SymbolType_DOT: return "DOT";
		case SymbolType_Definition: return "Definition";
		case SymbolType_EndOfFile: return "EndOfFile";
		case SymbolType_EndOfLine: return "EndOfLine";
		case SymbolType_Expression: return "Expression";
		case SymbolType_Grammar: return "Grammar";
		case SymbolType_Identifier: return "Identifier";
		case SymbolType_LEFTARROW: return "LEFTARROW";
		case SymbolType_Literal: return "Literal";
		case SymbolType_NOT: return "NOT";
		case SymbolType_OPEN: return "OPEN";
		case SymbolType_PLUS: return "PLUS";
		case SymbolType_Prefix: return "Prefix";
		case SymbolType_Primary: return "Primary";
		case SymbolType_QUESTION: return "QUESTION";
		case SymbolType_Range: return "Range";
		case SymbolType_SLASH: return "SLASH";
		case SymbolType_STAR: return "STAR";
		case SymbolType_Sequence: return "Sequence";
		case SymbolType_Space: return "Space";
		case SymbolType_Spacing: return "Spacing";
		case SymbolType_Suffix: return "Suffix";
		default: throw std::runtime_error(str(boost::format("Invalid Symbol Type: %1%") % _type));
	}
}

const char** PEGParser::Parser::GetEnd(SymbolType _type, const char* _pBegin)
{
	for (MemoRange range = memoMap.equal_range(_pBegin); range.first != range.second; ++range.first)
		if (range.first->second.first[_type])
			return &range.first->second.second;
	return 0;
}

void PEGParser::Parser::SetEnd(SymbolType _type, const char* _pBegin, const char* _pEnd)
{
	for (MemoRange range = memoMap.equal_range(_pBegin);; ++range.first)
	{
		if (range.first == range.second)
		{
			memoMap.insert(Memo(_pBegin, MemoValue(SymbolTypeSet().set(_type), _pEnd)));
			break;
		}
		if (range.first->second.second == _pEnd)
		{
			range.first->second.first.set(_type);
			break;
		}
	}
}

const char* PEGParser::Parser::Parse(SymbolType _type, const char* _pBegin)
{
	const char* p = _pBegin;
	switch (_type)
	{
		case SymbolType_AND:
		{
			if (*p == '&') ++p; else p = 0;
			if (p)
			{
				p = Parse(SymbolType_Spacing, p);
			}
		  return p;
		}

		case SymbolType_CLOSE:
		{
			if (*p == ')') ++p; else p = 0;
			if (p)
			{
				p = Parse(SymbolType_Spacing, p);
			}
		  return p;
		}

		case SymbolType_Char:
		{
			if (const char** pMemo = GetEnd(SymbolType_Char, _pBegin))
				return *pMemo;
			const char* b = p;
			if (*p == '\\') ++p; else p = 0;
			if (p)
			{
				const char* b2 = p;
				if (*p == 'n') ++p; else p = 0;
				if (!p)
				{
					p = b2;
					if (*p == 'r') ++p; else p = 0;
					if (!p)
					{
						p = b2;
						if (*p == 't') ++p; else p = 0;
						if (!p)
						{
							p = b2;
							if (*p == '\'') ++p; else p = 0;
							if (!p)
							{
								p = b2;
								if (*p == '\"') ++p; else p = 0;
								if (!p)
								{
									p = b2;
									if (*p == '[') ++p; else p = 0;
									if (!p)
									{
										p = b2;
										if (*p == ']') ++p; else p = 0;
										if (!p)
										{
											p = b2;
											if (*p == '\\') ++p; else p = 0;
											if (!p)
											{
												p = b2;
												if (*p >= '1' && *p <= '9') ++p; else p = 0;
												if (p)
												{
													for (;;)
													{
														const char* b3 = p;
														if (*p >= '0' && *p <= '9') ++p; else p = 0;
														if (!p)
														{
															p = b3;
															break;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if (!p)
			{
				p = b;
				if (*p == '\\') ++p; else p = 0;
				if (p) p = 0; else p = b;
				if (p)
				{
					if (*p != 0) ++p; else p = 0;
				}
			}
			SetEnd(SymbolType_Char, _pBegin, p);
		  return p;
		}

		case SymbolType_Class:
		{
			if (const char** pMemo = GetEnd(SymbolType_Class, _pBegin))
				return *pMemo;
			if (*p == '[') ++p; else p = 0;
			if (p)
			{
				for (;;)
				{
					const char* b = p;
					if (*p == ']') ++p; else p = 0;
					if (p) p = 0; else p = b;
					if (p)
					{
						p = Parse(SymbolType_Range, p);
					}
					if (!p)
					{
						p = b;
						break;
					}
				}
				if (p)
				{
					if (*p == ']') ++p; else p = 0;
					if (p)
					{
						p = Parse(SymbolType_Spacing, p);
					}
				}
			}
			SetEnd(SymbolType_Class, _pBegin, p);
		  return p;
		}

		case SymbolType_Comment:
		{
			if (*p == '#') ++p; else p = 0;
			if (p)
			{
				for (;;)
				{
					const char* b = p;
					p = Parse(SymbolType_EndOfLine, p);
					if (p) p = 0; else p = b;
					if (p)
					{
						if (*p != 0) ++p; else p = 0;
					}
					if (!p)
					{
						p = b;
						break;
					}
				}
				if (p)
				{
					p = Parse(SymbolType_EndOfLine, p);
				}
			}
		  return p;
		}

		case SymbolType_DOT:
		{
			if (*p == '.') ++p; else p = 0;
			if (p)
			{
				p = Parse(SymbolType_Spacing, p);
			}
		  return p;
		}

		case SymbolType_Definition:
		{
			if (const char** pMemo = GetEnd(SymbolType_Definition, _pBegin))
				return *pMemo;
			p = Parse(SymbolType_Identifier, p);
			if (p)
			{
				p = Parse(SymbolType_Spacing, p);
				if (p)
				{
					p = Parse(SymbolType_LEFTARROW, p);
					if (p)
					{
						p = Parse(SymbolType_Expression, p);
					}
				}
			}
			SetEnd(SymbolType_Definition, _pBegin, p);
		  return p;
		}

		case SymbolType_EndOfFile:
		{
			const char* b = p;
			if (*p != 0) ++p; else p = 0;
			if (p) p = 0; else p = b;
		  return p;
		}

		case SymbolType_EndOfLine:
		{
			const char* b = p;
			if (*p == '\r') ++p; else p = 0;
			if (p)
			{
				if (*p == '\n') ++p; else p = 0;
			}
			if (!p)
			{
				p = b;
				if (*p == '\n') ++p; else p = 0;
				if (!p)
				{
					p = b;
					if (*p == '\r') ++p; else p = 0;
				}
			}
		  return p;
		}

		case SymbolType_Expression:
		{
			if (const char** pMemo = GetEnd(SymbolType_Expression, _pBegin))
				return *pMemo;
			p = Parse(SymbolType_Sequence, p);
			if (p)
			{
				for (;;)
				{
					const char* b = p;
					p = Parse(SymbolType_SLASH, p);
					if (p)
					{
						p = Parse(SymbolType_Sequence, p);
					}
					if (!p)
					{
						p = b;
						break;
					}
				}
			}
			SetEnd(SymbolType_Expression, _pBegin, p);
		  return p;
		}

		case SymbolType_Grammar:
		{
			if (const char** pMemo = GetEnd(SymbolType_Grammar, _pBegin))
				return *pMemo;
			p = Parse(SymbolType_Spacing, p);
			if (p)
			{
				p = Parse(SymbolType_Definition, p);
				if (p)
				{
					for (;;)
					{
						const char* b = p;
						p = Parse(SymbolType_Definition, p);
						if (!p)
						{
							p = b;
							break;
						}
					}
					if (p)
					{
						p = Parse(SymbolType_EndOfFile, p);
					}
				}
			}
			SetEnd(SymbolType_Grammar, _pBegin, p);
		  return p;
		}

		case SymbolType_Identifier:
		{
			if (const char** pMemo = GetEnd(SymbolType_Identifier, _pBegin))
				return *pMemo;
			const char* b = p;
			if (*p >= 'a' && *p <= 'z') ++p; else p = 0;
			if (!p)
			{
				p = b;
				if (*p >= 'A' && *p <= 'Z') ++p; else p = 0;
				if (!p)
				{
					p = b;
					if (*p == '_') ++p; else p = 0;
				}
			}
			if (p)
			{
				for (;;)
				{
					const char* b2 = p;
					if (*p >= 'a' && *p <= 'z') ++p; else p = 0;
					if (!p)
					{
						p = b2;
						if (*p >= 'A' && *p <= 'Z') ++p; else p = 0;
						if (!p)
						{
							p = b2;
							if (*p >= '0' && *p <= '9') ++p; else p = 0;
							if (!p)
							{
								p = b2;
								if (*p == '_') ++p; else p = 0;
							}
						}
					}
					if (!p)
					{
						p = b2;
						break;
					}
				}
			}
			SetEnd(SymbolType_Identifier, _pBegin, p);
		  return p;
		}

		case SymbolType_LEFTARROW:
		{
			if (const char** pMemo = GetEnd(SymbolType_LEFTARROW, _pBegin))
				return *pMemo;
			if (*p == '<') ++p; else p = 0;
			if (p)
			{
				const char* b = p;
				if (*p == '-') ++p; else p = 0;
				if (!p)
				{
					p = b;
					if (*p == '=') ++p; else p = 0;
					if (!p)
					{
						p = b;
						if (*p == '<') ++p; else p = 0;
					}
				}
				if (p)
				{
					p = Parse(SymbolType_Spacing, p);
				}
			}
			SetEnd(SymbolType_LEFTARROW, _pBegin, p);
		  return p;
		}

		case SymbolType_Literal:
		{
			if (const char** pMemo = GetEnd(SymbolType_Literal, _pBegin))
				return *pMemo;
			const char* b = p;
			if (*p == '\'') ++p; else p = 0;
			if (p)
			{
				for (;;)
				{
					const char* b2 = p;
					if (*p == '\'') ++p; else p = 0;
					if (p) p = 0; else p = b2;
					if (p)
					{
						p = Parse(SymbolType_Char, p);
					}
					if (!p)
					{
						p = b2;
						break;
					}
				}
				if (p)
				{
					if (*p == '\'') ++p; else p = 0;
					if (p)
					{
						p = Parse(SymbolType_Spacing, p);
					}
				}
			}
			if (!p)
			{
				p = b;
				if (*p == '\"') ++p; else p = 0;
				if (p)
				{
					for (;;)
					{
						const char* b3 = p;
						if (*p == '\"') ++p; else p = 0;
						if (p) p = 0; else p = b3;
						if (p)
						{
							p = Parse(SymbolType_Char, p);
						}
						if (!p)
						{
							p = b3;
							break;
						}
					}
					if (p)
					{
						if (*p == '\"') ++p; else p = 0;
						if (p)
						{
							p = Parse(SymbolType_Spacing, p);
						}
					}
				}
			}
			SetEnd(SymbolType_Literal, _pBegin, p);
		  return p;
		}

		case SymbolType_NOT:
		{
			if (*p == '!') ++p; else p = 0;
			if (p)
			{
				p = Parse(SymbolType_Spacing, p);
			}
		  return p;
		}

		case SymbolType_OPEN:
		{
			if (*p == '(') ++p; else p = 0;
			if (p)
			{
				p = Parse(SymbolType_Spacing, p);
			}
		  return p;
		}

		case SymbolType_PLUS:
		{
			if (*p == '+') ++p; else p = 0;
			if (p)
			{
				p = Parse(SymbolType_Spacing, p);
			}
		  return p;
		}

		case SymbolType_Prefix:
		{
			if (const char** pMemo = GetEnd(SymbolType_Prefix, _pBegin))
				return *pMemo;
			const char* b = p;
			p = Parse(SymbolType_AND, p);
			if (!p)
			{
				p = b;
				p = Parse(SymbolType_NOT, p);
				if (!p)
				{
					p = b;
				}
			}
			if (p)
			{
				p = Parse(SymbolType_Suffix, p);
			}
			SetEnd(SymbolType_Prefix, _pBegin, p);
		  return p;
		}

		case SymbolType_Primary:
		{
			if (const char** pMemo = GetEnd(SymbolType_Primary, _pBegin))
				return *pMemo;
			const char* b = p;
			p = Parse(SymbolType_Identifier, p);
			if (p)
			{
				p = Parse(SymbolType_Spacing, p);
				if (p)
				{
					const char* b2 = p;
					p = Parse(SymbolType_LEFTARROW, p);
					if (p) p = 0; else p = b2;
				}
			}
			if (!p)
			{
				p = b;
				p = Parse(SymbolType_OPEN, p);
				if (p)
				{
					p = Parse(SymbolType_Expression, p);
					if (p)
					{
						p = Parse(SymbolType_CLOSE, p);
					}
				}
				if (!p)
				{
					p = b;
					p = Parse(SymbolType_Literal, p);
					if (!p)
					{
						p = b;
						p = Parse(SymbolType_Class, p);
						if (!p)
						{
							p = b;
							p = Parse(SymbolType_DOT, p);
						}
					}
				}
			}
			SetEnd(SymbolType_Primary, _pBegin, p);
		  return p;
		}

		case SymbolType_QUESTION:
		{
			if (*p == '?') ++p; else p = 0;
			if (p)
			{
				p = Parse(SymbolType_Spacing, p);
			}
		  return p;
		}

		case SymbolType_Range:
		{
			if (const char** pMemo = GetEnd(SymbolType_Range, _pBegin))
				return *pMemo;
			p = Parse(SymbolType_Char, p);
			if (p)
			{
				const char* b = p;
				if (*p == '-') ++p; else p = 0;
				if (p)
				{
					p = Parse(SymbolType_Char, p);
				}
				if (!p)
				{
					p = b;
				}
			}
			SetEnd(SymbolType_Range, _pBegin, p);
		  return p;
		}

		case SymbolType_SLASH:
		{
			if (*p == '/') ++p; else p = 0;
			if (p)
			{
				p = Parse(SymbolType_Spacing, p);
			}
		  return p;
		}

		case SymbolType_STAR:
		{
			if (*p == '*') ++p; else p = 0;
			if (p)
			{
				p = Parse(SymbolType_Spacing, p);
			}
		  return p;
		}

		case SymbolType_Sequence:
		{
			if (const char** pMemo = GetEnd(SymbolType_Sequence, _pBegin))
				return *pMemo;
			for (;;)
			{
				const char* b = p;
				p = Parse(SymbolType_Prefix, p);
				if (!p)
				{
					p = b;
					break;
				}
			}
			SetEnd(SymbolType_Sequence, _pBegin, p);
		  return p;
		}

		case SymbolType_Space:
		{
			const char* b = p;
			if (*p == ' ') ++p; else p = 0;
			if (!p)
			{
				p = b;
				if (*p == '\t') ++p; else p = 0;
				if (!p)
				{
					p = b;
					p = Parse(SymbolType_EndOfLine, p);
				}
			}
		  return p;
		}

		case SymbolType_Spacing:
		{
			if (const char** pMemo = GetEnd(SymbolType_Spacing, _pBegin))
				return *pMemo;
			for (;;)
			{
				const char* b = p;
				p = Parse(SymbolType_Space, p);
				if (!p)
				{
					p = b;
					p = Parse(SymbolType_Comment, p);
				}
				if (!p)
				{
					p = b;
					break;
				}
			}
			SetEnd(SymbolType_Spacing, _pBegin, p);
		  return p;
		}

		case SymbolType_Suffix:
		{
			if (const char** pMemo = GetEnd(SymbolType_Suffix, _pBegin))
				return *pMemo;
			p = Parse(SymbolType_Primary, p);
			if (p)
			{
				const char* b = p;
				p = Parse(SymbolType_QUESTION, p);
				if (!p)
				{
					p = b;
					p = Parse(SymbolType_STAR, p);
					if (!p)
					{
						p = b;
						p = Parse(SymbolType_PLUS, p);
						if (!p)
						{
							p = b;
						}
					}
				}
			}
			SetEnd(SymbolType_Suffix, _pBegin, p);
		  return p;
		}

		default:
			assert(false);
			return 0;
	}
}

const char* PEGParser::Parser::Traverse(PEGParser::SymbolType _type, const char* _pBegin, PEGParser::Symbols& v)
{
	const char* p = _pBegin;
	switch (_type)
	{
		case SymbolType_Class:
		{
			if (const char** pMemo = GetEnd(SymbolType_Class, _pBegin))
				if (!*pMemo)
					return 0;
			if (*p == '[') ++p; else p = 0;
			if (p)
			{
				for (;;)
				{
					const char* b = p;
					size_t s = v.size();
					if (*p == ']') ++p; else p = 0;
					if (p) p = 0; else p = b;
					if (p)
					{
						p = Visit(SymbolType_Range, p, v);
					}
					if (!p)
					{
						p = b;
						v.erase(v.begin() + s, v.end());
						break;
					}
				}
				if (p)
				{
					if (*p == ']') ++p; else p = 0;
					if (p)
					{
						p = Parse(SymbolType_Spacing, p);
					}
				}
			}
			SetEnd(SymbolType_Class, _pBegin, p);
			return p;
		}

		case SymbolType_Definition:
		{
			if (const char** pMemo = GetEnd(SymbolType_Definition, _pBegin))
				if (!*pMemo)
					return 0;
			p = Visit(SymbolType_Identifier, p, v);
			if (p)
			{
				p = Parse(SymbolType_Spacing, p);
				if (p)
				{
					p = Visit(SymbolType_LEFTARROW, p, v);
					if (p)
					{
						p = Visit(SymbolType_Expression, p, v);
					}
				}
			}
			SetEnd(SymbolType_Definition, _pBegin, p);
			return p;
		}

		case SymbolType_Expression:
		{
			if (const char** pMemo = GetEnd(SymbolType_Expression, _pBegin))
				if (!*pMemo)
					return 0;
			p = Visit(SymbolType_Sequence, p, v);
			if (p)
			{
				for (;;)
				{
					const char* b = p;
					size_t s = v.size();
					p = Parse(SymbolType_SLASH, p);
					if (p)
					{
						p = Visit(SymbolType_Sequence, p, v);
					}
					if (!p)
					{
						p = b;
						v.erase(v.begin() + s, v.end());
						break;
					}
				}
			}
			SetEnd(SymbolType_Expression, _pBegin, p);
			return p;
		}

		case SymbolType_Grammar:
		{
			if (const char** pMemo = GetEnd(SymbolType_Grammar, _pBegin))
				if (!*pMemo)
					return 0;
			p = Parse(SymbolType_Spacing, p);
			if (p)
			{
				p = Visit(SymbolType_Definition, p, v);
				if (p)
				{
					for (;;)
					{
						const char* b = p;
						size_t s = v.size();
						p = Visit(SymbolType_Definition, p, v);
						if (!p)
						{
							p = b;
							v.erase(v.begin() + s, v.end());
							break;
						}
					}
					if (p)
					{
						p = Parse(SymbolType_EndOfFile, p);
					}
				}
			}
			SetEnd(SymbolType_Grammar, _pBegin, p);
			return p;
		}

		case SymbolType_Literal:
		{
			if (const char** pMemo = GetEnd(SymbolType_Literal, _pBegin))
				if (!*pMemo)
					return 0;
			const char* b = p;
			size_t s = v.size();
			if (*p == '\'') ++p; else p = 0;
			if (p)
			{
				for (;;)
				{
					const char* b2 = p;
					size_t s2 = v.size();
					if (*p == '\'') ++p; else p = 0;
					if (p) p = 0; else p = b2;
					if (p)
					{
						p = Visit(SymbolType_Char, p, v);
					}
					if (!p)
					{
						p = b2;
						v.erase(v.begin() + s2, v.end());
						break;
					}
				}
				if (p)
				{
					if (*p == '\'') ++p; else p = 0;
					if (p)
					{
						p = Parse(SymbolType_Spacing, p);
					}
				}
			}
			if (!p)
			{
				p = b;
				v.erase(v.begin() + s, v.end());
				if (*p == '\"') ++p; else p = 0;
				if (p)
				{
					for (;;)
					{
						const char* b3 = p;
						size_t s3 = v.size();
						if (*p == '\"') ++p; else p = 0;
						if (p) p = 0; else p = b3;
						if (p)
						{
							p = Visit(SymbolType_Char, p, v);
						}
						if (!p)
						{
							p = b3;
							v.erase(v.begin() + s3, v.end());
							break;
						}
					}
					if (p)
					{
						if (*p == '\"') ++p; else p = 0;
						if (p)
						{
							p = Parse(SymbolType_Spacing, p);
						}
					}
				}
			}
			SetEnd(SymbolType_Literal, _pBegin, p);
			return p;
		}

		case SymbolType_Prefix:
		{
			if (const char** pMemo = GetEnd(SymbolType_Prefix, _pBegin))
				if (!*pMemo)
					return 0;
			const char* b = p;
			p = Parse(SymbolType_AND, p);
			if (!p)
			{
				p = b;
				p = Parse(SymbolType_NOT, p);
				if (!p)
				{
					p = b;
				}
			}
			if (p)
			{
				p = Visit(SymbolType_Suffix, p, v);
			}
			SetEnd(SymbolType_Prefix, _pBegin, p);
			return p;
		}

		case SymbolType_Primary:
		{
			if (const char** pMemo = GetEnd(SymbolType_Primary, _pBegin))
				if (!*pMemo)
					return 0;
			const char* b = p;
			size_t s = v.size();
			p = Visit(SymbolType_Identifier, p, v);
			if (p)
			{
				p = Parse(SymbolType_Spacing, p);
				if (p)
				{
					const char* b2 = p;
					p = Parse(SymbolType_LEFTARROW, p);
					if (p) p = 0; else p = b2;
				}
			}
			if (!p)
			{
				p = b;
				v.erase(v.begin() + s, v.end());
				p = Parse(SymbolType_OPEN, p);
				if (p)
				{
					p = Visit(SymbolType_Expression, p, v);
					if (p)
					{
						p = Parse(SymbolType_CLOSE, p);
					}
				}
				if (!p)
				{
					p = b;
					v.erase(v.begin() + s, v.end());
					p = Visit(SymbolType_Literal, p, v);
					if (!p)
					{
						p = b;
						v.erase(v.begin() + s, v.end());
						p = Visit(SymbolType_Class, p, v);
						if (!p)
						{
							p = b;
							v.erase(v.begin() + s, v.end());
							p = Parse(SymbolType_DOT, p);
						}
					}
				}
			}
			SetEnd(SymbolType_Primary, _pBegin, p);
			return p;
		}

		case SymbolType_Range:
		{
			if (const char** pMemo = GetEnd(SymbolType_Range, _pBegin))
				if (!*pMemo)
					return 0;
			p = Visit(SymbolType_Char, p, v);
			if (p)
			{
				const char* b = p;
				size_t s = v.size();
				if (*p == '-') ++p; else p = 0;
				if (p)
				{
					p = Visit(SymbolType_Char, p, v);
				}
				if (!p)
				{
					p = b;
					v.erase(v.begin() + s, v.end());
				}
			}
			SetEnd(SymbolType_Range, _pBegin, p);
			return p;
		}

		case SymbolType_Sequence:
		{
			if (const char** pMemo = GetEnd(SymbolType_Sequence, _pBegin))
				if (!*pMemo)
					return 0;
			for (;;)
			{
				const char* b = p;
				size_t s = v.size();
				p = Visit(SymbolType_Prefix, p, v);
				if (!p)
				{
					p = b;
					v.erase(v.begin() + s, v.end());
					break;
				}
			}
			SetEnd(SymbolType_Sequence, _pBegin, p);
			return p;
		}

		case SymbolType_Suffix:
		{
			if (const char** pMemo = GetEnd(SymbolType_Suffix, _pBegin))
				if (!*pMemo)
					return 0;
			p = Visit(SymbolType_Primary, p, v);
			if (p)
			{
				const char* b = p;
				p = Parse(SymbolType_QUESTION, p);
				if (!p)
				{
					p = b;
					p = Parse(SymbolType_STAR, p);
					if (!p)
					{
						p = b;
						p = Parse(SymbolType_PLUS, p);
						if (!p)
						{
							p = b;
						}
					}
				}
			}
			SetEnd(SymbolType_Suffix, _pBegin, p);
			return p;
		}

		case SymbolType_AND:
		case SymbolType_CLOSE:
		case SymbolType_Char:
		case SymbolType_Comment:
		case SymbolType_DOT:
		case SymbolType_EndOfFile:
		case SymbolType_EndOfLine:
		case SymbolType_Identifier:
		case SymbolType_LEFTARROW:
		case SymbolType_NOT:
		case SymbolType_OPEN:
		case SymbolType_PLUS:
		case SymbolType_QUESTION:
		case SymbolType_SLASH:
		case SymbolType_STAR:
		case SymbolType_Space:
		case SymbolType_Spacing:
			return Parse(_type, p);

		default:
			assert(false);
			return 0;
	}
}

void PEGParser::Parser::Print(std::ostream& _os, PEGParser::SymbolType _type, const char* _pNode, int _tabs, int _maxLineSize)
{
	Symbols children;
	const char* pEnd = Traverse(_type, _pNode, children);
	if (!pEnd)
		throw std::runtime_error(str(boost::format("Parsing Failed for \"%1%\"") % SymbolName(_type)));

	int tabCount = _tabs;
	while (tabCount--)
		_os << "    ";

	_os << SymbolName(_type) << ": \"";

	size_t lineSize = 0;
	for (const char* p = _pNode; p != pEnd; ++p)
	{
		_os << EscapeChar(*p);
		if (++lineSize >= _maxLineSize)
		{
			_os << "...";
			break;
		}
	}

	_os << "\"\n";

	for (Symbols::iterator i = children.begin(), iEnd = children.end(); i != iEnd; ++i)
		Print(_os, i->first, i->second, _tabs + 1, _maxLineSize);
//*
	if (_tabs == 0)
	{
		size_t bucketCount = memoMap.bucket_count();
		size_t collisionCount = 0;
		for (size_t bucket = 0; bucket != bucketCount; ++bucket)
		{
			size_t bucketSize = memoMap.bucket_size(bucket);
			_os << "Bucket " << bucket << " Size: " << bucketSize << "\n";			
			if (bucketSize > 1)
					++collisionCount;
		}
		_os << "Max Load Factor: " << memoMap.max_load_factor() << "\n";
		_os << "Bucket Count: " << bucketCount << "\n";
		_os << "Collision Count: " << collisionCount << "\n";
		size_t perSymbolNullCount[SymbolTypeCount] = {0};
		size_t perSymbolNonNullCount[SymbolTypeCount] = {0};
		for (MemoMap::const_iterator j = memoMap.begin(), jEnd = memoMap.end(); j != jEnd; ++j)
		{
			for (size_t k = 0; k < SymbolTypeCount; ++k)
			{
				if (j->second.first[k])
				{
					if (j->second.second == 0)
						++perSymbolNullCount[k];
					else
						++perSymbolNonNullCount[k];
				}
			}
		}
		_os << "Memo Count: " << memoMap.size() << "\n";
		for (size_t k = 0; k < SymbolTypeCount; ++k)
			_os << boost::format("%1%: %|20t|{ Null Count: %2% %|40t|Non Null Count: %3%%|60t|}\n") % SymbolName(SymbolType(k)) % perSymbolNullCount[k] % perSymbolNonNullCount[k];
	}
//*/
}

const char* PEGParser::Parser::Visit(PEGParser::SymbolType _type, const char* _p, PEGParser::Symbols& _v)
{
	const char* pEnd = Parse(_type, _p);
	if (pEnd)
		_v.push_back(Symbol(_type, _p));
	return pEnd;
}

PEGParser::Iterator::Iterator(PEGParser::SymbolType _type, const char* _pNode)
:	mType(_type)
,	mpNode(_pNode)
, mpSiblings(new Symbols)
, mpParser(new Parser)
{
	if (mpNode && End())
		mpSiblings->push_back(Symbol(mType, mpNode));

	miCurrent = mpSiblings->begin();				
}

PEGParser::Iterator::Iterator(const PEGParser::Iterator& _iOther)
: mType(_iOther.mType)
,	mpNode(_iOther.mpNode)
, mpSiblings(_iOther.mpSiblings)
, miCurrent(_iOther.miCurrent)
,	mpParser(_iOther.mpParser)
{
}

PEGParser::Iterator::operator bool() const
{
	return mpNode != 0;
}

PEGParser::Iterator& PEGParser::Iterator::operator++()
{
	mpChildren.reset();
	GoToNext(mType);
	return *this;
}

PEGParser::SymbolType PEGParser::Iterator::GetType() const
{
	return mType;
}

const char* PEGParser::Iterator::Begin() const
{
	assert(mpNode);
	return mpNode;
}

const char* PEGParser::Iterator::End() const
{
	assert(mpNode);
	return mpParser->Parse(mType, mpNode);
}

PEGParser::Iterator PEGParser::Iterator::GetChild(PEGParser::SymbolType _childT)
{
	assert(mpNode != 0);
	return Iterator(mpParser, GetChildren(), _childT);
}

PEGParser::Iterator PEGParser::Iterator::GetNext(PEGParser::SymbolType _childT)
{
	assert(mpNode != 0);
	return Iterator(*this, _childT);
}

void PEGParser::Iterator::Print(std::ostream& _os, int _tabs, int _maxLineSize)
{
	mpParser->Print(_os, mType, mpNode, _tabs, _maxLineSize);
}

PEGParser::Iterator::Iterator(boost::shared_ptr<PEGParser::Parser> _pParser, boost::shared_ptr<PEGParser::Symbols> _pSiblings, PEGParser::SymbolType _childType)
: mType(_childType)
, mpSiblings(_pSiblings)
, miCurrent(_pSiblings->begin())
,	mpParser(_pParser)
{
	SkipSiblingsWithWrongType(_childType);
}

PEGParser::Iterator::Iterator(const PEGParser::Iterator& _iOther, PEGParser::SymbolType _childType)
: mType(_childType)
,	mpSiblings(_iOther.mpSiblings)
,	miCurrent(_iOther.miCurrent)
,	mpParser(_iOther.mpParser)
{
	SkipSiblingsWithWrongType(_childType);
}

void PEGParser::Iterator::GoToNext(PEGParser::SymbolType _childType)
{
	++miCurrent;
	SkipSiblingsWithWrongType(_childType);
}

void PEGParser::Iterator::SkipSiblingsWithWrongType(PEGParser::SymbolType _childType)
{
	Symbols::iterator iEnd = mpSiblings->end();
	while (miCurrent != iEnd && miCurrent->first != _childType)
		++miCurrent;
	mpNode = (miCurrent != iEnd) ? miCurrent->second : 0 ;
}

boost::shared_ptr<PEGParser::Symbols> PEGParser::Iterator::GetChildren()
{
	if (!mpChildren)
	{
		Symbols children;
		mpParser->Traverse(mType, mpNode, children);
		mpChildren.reset(new Symbols);
		mpChildren->swap(children);			
	}
	return mpChildren;
}

std::ostream& PEGParser::operator<<(std::ostream& _os, const PEGParser::Iterator& _i)
{
	if (_i)
	{
		for (const char *p = _i.Begin(), *pEnd = _i.End(); p != pEnd; ++p)
			_os.put(*p);
	}
	return _os;
}

