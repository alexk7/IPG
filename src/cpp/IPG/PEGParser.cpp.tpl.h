// This file automatically generated by template-converter:
//    /usr/local/bin/template-converter PEGParser.cpp.tpl.h /Users/alexk7/ipg/build/xcode/../../src/tpl/PEGParser.cpp.tpl /Users/alexk7/Library/Developer/Xcode/DerivedData/ipg-acuzlgobcqgvwyfrqqszjnxugixf/Build/Products/Debug/PEGParser.cpp.tpl.h
//
// DO NOT EDIT!

#ifndef PEGPARSER_CPP_TPL_H_
#define PEGPARSER_CPP_TPL_H_

#include <string>

const std::string PEGParser_cpp_tpl (
"#include \"{{name}}.h\"\n"
"\n"
"namespace {{name}}\n"
"{\n"
"	namespace\n"
"	{\n"
"		PTNode* ParseRange(char _rangeBegin, char _rangeEnd, PTNode* _symbol)\n"
"		{\n"
"			if (_symbol->value < _rangeBegin)\n"
"				return 0;\n"
"			if (_symbol->value > _rangeEnd)\n"
"				return 0;\n"
"			return ++_symbol;\n"
"		}\n"
"		\n"
"		PTNode* ParseChar(char _char, PTNode* _symbol)\n"
"		{\n"
"			if (_symbol->value != _char)\n"
"				return 0;\n"
"			return ++_symbol;\n"
"		}\n"
"		\n"
"		PTNode* ParseAnyChar(PTNode* _symbol)\n"
"		{\n"
"			if (_symbol->value == 0)\n"
"				return 0;\n"
"			return ++_symbol;\n"
"		}\n"
"		\n"
"		PTNode* GetEnd(const PTNode* _symbol, PTNodeType _type)\n"
"		{\n"
"			PTNodeTypeToPtr::const_iterator i = _symbol->end.find(_type);\n"
"			if (i == _symbol->end.end())\n"
"				return 0;\n"
"			return i->second;\n"
"		}\n"
"		\n"
"		void SetEnd(PTNode* _symbol, PTNodeType _type, PTNode* _end)\n"
"		{\n"
"			_symbol->end[_type] = _end;\n"
"		}\n"
"		\n"
"		PTNode* Visit(PTNode* _symbol, PTNodeType _type, PTNodeVisitor& _visitor)\n"
"		{\n"
"			PTNode* end = GetEnd(_symbol, _type);\n"
"			if (end)\n"
"				_visitor(_symbol, _type);\n"
"			return end;\n"
"		}\n"
"		{{#def}}\n"
"		PTNode* Parse_{{name}}(PTNode*);{{/def}}\n"
"		{{#def}}\n"
"		PTNode* Parse_{{name}}(PTNode* p0)\n"
"		{{{#isMemoized}}\n"
"			PTNode* p1 = GetEnd(p0, PTNodeType_{{name}});\n"
"			if (p1)\n"
"				return p1;{{/isMemoized}}\n"
"{{parseCode}}{{#isMemoized}}			SetEnd(p0, PTNodeType_{{name}}, p{{parseResultIndex}});\n"
"{{/isMemoized}}			return p{{parseResultIndex}};\n"
"		}\n"
"{{/def}}{{#def}}\n"
"		PTNode* Traverse_{{name}}(PTNode*, PTNodeVisitor&);{{/def}}\n"
"		{{#def}}\n"
"		PTNode* Traverse_{{name}}(PTNode* p0, PTNodeVisitor& v)\n"
"		{{{#isMemoized}}\n"
"			if (!GetEnd(p0, PTNodeType_{{name}}))\n"
"				return 0;{{/isMemoized}}\n"
"{{traverseCode}}			return p{{traverseResultIndex}};\n"
"		}\n"
"{{/def}}	}\n"
"	\n"
"	PTNode* Parse(PTNodeType _type, PTNode* _symbol)\n"
"	{\n"
"		switch (_type)\n"
"		{{{#def}}\n"
"			case PTNodeType_{{name}}: return Parse_{{name}}(_symbol);{{/def}}\n"
"		}\n"
"		return 0;\n"
"	}\n"
"	\n"
"	PTNode* Traverse(PTNodeType _type, PTNode* _symbol, PTNodeVisitor& _visitor)\n"
"	{\n"
"		switch (_type)\n"
"		{{{#def}}\n"
"			case PTNodeType_{{name}}: return Traverse_{{name}}(_symbol, _visitor);{{/def}}\n"
"		}\n"
"		return 0;\n"
"	}\n"
"}\n"
);

#endif /* PEGPARSER_CPP_TPL_H_ */
