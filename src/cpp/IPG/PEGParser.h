// This file was automatically generated by IPG
// DO NOT EDIT!
#ifndef PEGPARSER_H
#define PEGPARSER_H

#include <map>

namespace PEGParser
{
	enum PTNodeType
	{
		PTNodeType_AND = 1,
		PTNodeType_CLOSE = 2,
		PTNodeType_Char = 3,
		PTNodeType_Class = 4,
		PTNodeType_Class_1 = 5,
		PTNodeType_Comment = 6,
		PTNodeType_DOT = 7,
		PTNodeType_Definition = 8,
		PTNodeType_EndOfFile = 9,
		PTNodeType_EndOfLine = 10,
		PTNodeType_Expression = 11,
		PTNodeType_Expression_1 = 12,
		PTNodeType_Grammar = 13,
		PTNodeType_Identifier = 14,
		PTNodeType_LEFTARROW = 15,
		PTNodeType_Literal = 16,
		PTNodeType_Literal_1 = 17,
		PTNodeType_Literal_1_1 = 18,
		PTNodeType_Literal_2 = 19,
		PTNodeType_Literal_2_1 = 20,
		PTNodeType_NOT = 21,
		PTNodeType_OPEN = 22,
		PTNodeType_PLUS = 23,
		PTNodeType_Prefix = 24,
		PTNodeType_Primary = 25,
		PTNodeType_Primary_1 = 26,
		PTNodeType_Primary_2 = 27,
		PTNodeType_QUESTION = 28,
		PTNodeType_Range = 29,
		PTNodeType_Range_1 = 30,
		PTNodeType_SLASH = 31,
		PTNodeType_STAR = 32,
		PTNodeType_Sequence = 33,
		PTNodeType_Space = 34,
		PTNodeType_Spacing = 35,
		PTNodeType_Suffix = 36,
	};

	struct PTNode;
	typedef std::map<PTNodeType, PTNode*> PTNodeTypeToPtr;

	struct PTNode
	{
		char value;
		PTNodeTypeToPtr end;
	};

	struct PTNodeVisitor
	{
		virtual void operator()(PTNode* _symbol, PTNodeType _type) = 0;
	};

	PTNode* Parse(PTNodeType _type, PTNode* _symbol);
	PTNode* Traverse(PTNodeType _type, PTNode* _symbol, PTNodeVisitor& _visitor);
}

#endif
