// This file was automatically generated by IPG
// DO NOT EDIT!
#include "PEGParser.h"

namespace PEGParser
{
	namespace
	{
		PTNode* ParseRange(char _rangeBegin, char _rangeEnd, PTNode* _symbol)
		{
			if (_symbol->value < _rangeBegin)
				return 0;
			if (_symbol->value > _rangeEnd)
				return 0;
			return ++_symbol;
		}

		PTNode* ParseChar(char _char, PTNode* _symbol)
		{
			if (_symbol->value != _char)
				return 0;
			return ++_symbol;
		}

		PTNode* ParseAnyChar(PTNode* _symbol)
		{
			if (_symbol->value == 0)
				return 0;
			return ++_symbol;
		}

		PTNode* GetEnd(const PTNode* _symbol, PTNodeType _type)
		{
			PTNodeTypeToPtr::const_iterator i = _symbol->end.find(_type);
			if (i == _symbol->end.end())
				return 0;
			return i->second;
		}

		void SetEnd(PTNode* _symbol, PTNodeType _type, PTNode* _end)
		{
			_symbol->end[_type] = _end;
		}

		PTNode* Visit(PTNode* _symbol, PTNodeType _type, PTNodeVisitor& _visitor)
		{
			PTNode* end = GetEnd(_symbol, _type);
			if (end)
				_visitor(_symbol, _type);
			return end;
		}

		PTNode* Parse_AND(PTNode*);
		PTNode* Parse_CLOSE(PTNode*);
		PTNode* Parse_Char(PTNode*);
		PTNode* Parse_Class(PTNode*);
		PTNode* Parse_Class_1(PTNode*);
		PTNode* Parse_Comment(PTNode*);
		PTNode* Parse_DOT(PTNode*);
		PTNode* Parse_Definition(PTNode*);
		PTNode* Parse_EndOfFile(PTNode*);
		PTNode* Parse_EndOfLine(PTNode*);
		PTNode* Parse_Expression(PTNode*);
		PTNode* Parse_Expression_1(PTNode*);
		PTNode* Parse_Grammar(PTNode*);
		PTNode* Parse_Identifier(PTNode*);
		PTNode* Parse_LEFTARROW(PTNode*);
		PTNode* Parse_Literal(PTNode*);
		PTNode* Parse_Literal_1(PTNode*);
		PTNode* Parse_Literal_1_1(PTNode*);
		PTNode* Parse_Literal_2(PTNode*);
		PTNode* Parse_Literal_2_1(PTNode*);
		PTNode* Parse_NOT(PTNode*);
		PTNode* Parse_OPEN(PTNode*);
		PTNode* Parse_PLUS(PTNode*);
		PTNode* Parse_Prefix(PTNode*);
		PTNode* Parse_Primary(PTNode*);
		PTNode* Parse_Primary_1(PTNode*);
		PTNode* Parse_Primary_2(PTNode*);
		PTNode* Parse_QUESTION(PTNode*);
		PTNode* Parse_Range(PTNode*);
		PTNode* Parse_Range_1(PTNode*);
		PTNode* Parse_SLASH(PTNode*);
		PTNode* Parse_STAR(PTNode*);
		PTNode* Parse_Sequence(PTNode*);
		PTNode* Parse_Space(PTNode*);
		PTNode* Parse_Spacing(PTNode*);
		PTNode* Parse_Suffix(PTNode*);

		PTNode* Parse_AND(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_AND);
			if (p1)
				return p1;
			p1 = ParseChar('&', p0);
			if (p1)
			{
				p1 = Parse_Spacing(p1);
			}
			SetEnd(p0, PTNodeType_AND, p1);
			return p1;
		}

		PTNode* Parse_CLOSE(PTNode* p0)
		{
			PTNode* p1 = ParseChar(')', p0);
			if (p1)
			{
				p1 = Parse_Spacing(p1);
			}
			return p1;
		}

		PTNode* Parse_Char(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Char);
			if (p1)
				return p1;
			p1 = ParseChar('\\', p0);
			if (p1)
			{
				PTNode* p2 = ParseChar('n', p1);
				if (!p2)
				{
					p2 = ParseChar('r', p1);
					if (!p2)
					{
						p2 = ParseChar('t', p1);
						if (!p2)
						{
							p2 = ParseChar('\'', p1);
							if (!p2)
							{
								p2 = ParseChar('\"', p1);
								if (!p2)
								{
									p2 = ParseChar('[', p1);
									if (!p2)
									{
										p2 = ParseChar(']', p1);
										if (!p2)
										{
											p2 = ParseChar('\\', p1);
											if (!p2)
											{
												p2 = ParseRange('1', '9', p1);
												if (p2)
												{
													for (;;)
													{
														PTNode* p3 = ParseRange('0', '9', p2);
														if (!p3)
															break;
														p2 = p3;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				p1 = p2;
			}
			if (!p1)
			{
				p1 = ParseChar('\\', p0);
				p1 = p1 ? 0 : p0;
				if (p1)
				{
					p1 = ParseAnyChar(p1);
				}
			}
			SetEnd(p0, PTNodeType_Char, p1);
			return p1;
		}

		PTNode* Parse_Class(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Class);
			if (p1)
				return p1;
			p1 = ParseChar('[', p0);
			if (p1)
			{
				for (;;)
				{
					PTNode* p2 = Parse_Class_1(p1);
					if (!p2)
						break;
					p1 = p2;
				}
				if (p1)
				{
					p1 = ParseChar(']', p1);
					if (p1)
					{
						p1 = Parse_Spacing(p1);
					}
				}
			}
			SetEnd(p0, PTNodeType_Class, p1);
			return p1;
		}

		PTNode* Parse_Class_1(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Class_1);
			if (p1)
				return p1;
			p1 = ParseChar(']', p0);
			p1 = p1 ? 0 : p0;
			if (p1)
			{
				p1 = Parse_Range(p1);
			}
			SetEnd(p0, PTNodeType_Class_1, p1);
			return p1;
		}

		PTNode* Parse_Comment(PTNode* p0)
		{
			PTNode* p1 = ParseChar('#', p0);
			if (p1)
			{
				for (;;)
				{
					PTNode* p2 = Parse_EndOfLine(p1);
					p2 = p2 ? 0 : p1;
					if (p2)
					{
						p2 = ParseAnyChar(p2);
					}
					if (!p2)
						break;
					p1 = p2;
				}
				if (p1)
				{
					p1 = Parse_EndOfLine(p1);
				}
			}
			return p1;
		}

		PTNode* Parse_DOT(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_DOT);
			if (p1)
				return p1;
			p1 = ParseChar('.', p0);
			if (p1)
			{
				p1 = Parse_Spacing(p1);
			}
			SetEnd(p0, PTNodeType_DOT, p1);
			return p1;
		}

		PTNode* Parse_Definition(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Definition);
			if (p1)
				return p1;
			p1 = Parse_Identifier(p0);
			if (p1)
			{
				p1 = Parse_Spacing(p1);
				if (p1)
				{
					p1 = Parse_LEFTARROW(p1);
					if (p1)
					{
						p1 = Parse_Expression(p1);
					}
				}
			}
			SetEnd(p0, PTNodeType_Definition, p1);
			return p1;
		}

		PTNode* Parse_EndOfFile(PTNode* p0)
		{
			PTNode* p1 = ParseAnyChar(p0);
			p1 = p1 ? 0 : p0;
			return p1;
		}

		PTNode* Parse_EndOfLine(PTNode* p0)
		{
			PTNode* p1 = ParseChar('\r', p0);
			if (p1)
			{
				p1 = ParseChar('\n', p1);
			}
			if (!p1)
			{
				p1 = ParseChar('\n', p0);
				if (!p1)
				{
					p1 = ParseChar('\r', p0);
				}
			}
			return p1;
		}

		PTNode* Parse_Expression(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Expression);
			if (p1)
				return p1;
			p1 = Parse_Sequence(p0);
			if (p1)
			{
				for (;;)
				{
					PTNode* p2 = Parse_Expression_1(p1);
					if (!p2)
						break;
					p1 = p2;
				}
			}
			SetEnd(p0, PTNodeType_Expression, p1);
			return p1;
		}

		PTNode* Parse_Expression_1(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Expression_1);
			if (p1)
				return p1;
			p1 = Parse_SLASH(p0);
			if (p1)
			{
				p1 = Parse_Sequence(p1);
			}
			SetEnd(p0, PTNodeType_Expression_1, p1);
			return p1;
		}

		PTNode* Parse_Grammar(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Grammar);
			if (p1)
				return p1;
			p1 = Parse_Spacing(p0);
			if (p1)
			{
				p1 = Parse_Definition(p1);
				if (p1)
				{
					for (;;)
					{
						PTNode* p2 = Parse_Definition(p1);
						if (!p2)
							break;
						p1 = p2;
					}
					if (p1)
					{
						p1 = Parse_EndOfFile(p1);
					}
				}
			}
			SetEnd(p0, PTNodeType_Grammar, p1);
			return p1;
		}

		PTNode* Parse_Identifier(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Identifier);
			if (p1)
				return p1;
			p1 = ParseRange('a', 'z', p0);
			if (!p1)
			{
				p1 = ParseRange('A', 'Z', p0);
				if (!p1)
				{
					p1 = ParseChar('_', p0);
				}
			}
			if (p1)
			{
				for (;;)
				{
					PTNode* p2 = ParseRange('a', 'z', p1);
					if (!p2)
					{
						p2 = ParseRange('A', 'Z', p1);
						if (!p2)
						{
							p2 = ParseRange('0', '9', p1);
							if (!p2)
							{
								p2 = ParseChar('_', p1);
							}
						}
					}
					if (!p2)
						break;
					p1 = p2;
				}
			}
			SetEnd(p0, PTNodeType_Identifier, p1);
			return p1;
		}

		PTNode* Parse_LEFTARROW(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_LEFTARROW);
			if (p1)
				return p1;
			p1 = ParseChar('<', p0);
			if (p1)
			{
				PTNode* p2 = ParseChar('-', p1);
				if (!p2)
				{
					p2 = ParseChar('=', p1);
					if (!p2)
					{
						p2 = ParseChar('<', p1);
					}
				}
				if (p2)
				{
					p1 = Parse_Spacing(p2);
				}
			}
			SetEnd(p0, PTNodeType_LEFTARROW, p1);
			return p1;
		}

		PTNode* Parse_Literal(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Literal);
			if (p1)
				return p1;
			p1 = Parse_Literal_1(p0);
			if (!p1)
			{
				p1 = Parse_Literal_2(p0);
			}
			SetEnd(p0, PTNodeType_Literal, p1);
			return p1;
		}

		PTNode* Parse_Literal_1(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Literal_1);
			if (p1)
				return p1;
			p1 = ParseChar('\'', p0);
			if (p1)
			{
				for (;;)
				{
					PTNode* p2 = Parse_Literal_1_1(p1);
					if (!p2)
						break;
					p1 = p2;
				}
				if (p1)
				{
					p1 = ParseChar('\'', p1);
					if (p1)
					{
						p1 = Parse_Spacing(p1);
					}
				}
			}
			SetEnd(p0, PTNodeType_Literal_1, p1);
			return p1;
		}

		PTNode* Parse_Literal_1_1(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Literal_1_1);
			if (p1)
				return p1;
			p1 = ParseChar('\'', p0);
			p1 = p1 ? 0 : p0;
			if (p1)
			{
				p1 = Parse_Char(p1);
			}
			SetEnd(p0, PTNodeType_Literal_1_1, p1);
			return p1;
		}

		PTNode* Parse_Literal_2(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Literal_2);
			if (p1)
				return p1;
			p1 = ParseChar('\"', p0);
			if (p1)
			{
				for (;;)
				{
					PTNode* p2 = Parse_Literal_2_1(p1);
					if (!p2)
						break;
					p1 = p2;
				}
				if (p1)
				{
					p1 = ParseChar('\"', p1);
					if (p1)
					{
						p1 = Parse_Spacing(p1);
					}
				}
			}
			SetEnd(p0, PTNodeType_Literal_2, p1);
			return p1;
		}

		PTNode* Parse_Literal_2_1(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Literal_2_1);
			if (p1)
				return p1;
			p1 = ParseChar('\"', p0);
			p1 = p1 ? 0 : p0;
			if (p1)
			{
				p1 = Parse_Char(p1);
			}
			SetEnd(p0, PTNodeType_Literal_2_1, p1);
			return p1;
		}

		PTNode* Parse_NOT(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_NOT);
			if (p1)
				return p1;
			p1 = ParseChar('!', p0);
			if (p1)
			{
				p1 = Parse_Spacing(p1);
			}
			SetEnd(p0, PTNodeType_NOT, p1);
			return p1;
		}

		PTNode* Parse_OPEN(PTNode* p0)
		{
			PTNode* p1 = ParseChar('(', p0);
			if (p1)
			{
				p1 = Parse_Spacing(p1);
			}
			return p1;
		}

		PTNode* Parse_PLUS(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_PLUS);
			if (p1)
				return p1;
			p1 = ParseChar('+', p0);
			if (p1)
			{
				p1 = Parse_Spacing(p1);
			}
			SetEnd(p0, PTNodeType_PLUS, p1);
			return p1;
		}

		PTNode* Parse_Prefix(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Prefix);
			if (p1)
				return p1;
			p1 = Parse_AND(p0);
			if (!p1)
			{
				p1 = Parse_NOT(p0);
			}
			p1 = p1 ? p1 : p0;
			if (p1)
			{
				p1 = Parse_Suffix(p1);
			}
			SetEnd(p0, PTNodeType_Prefix, p1);
			return p1;
		}

		PTNode* Parse_Primary(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Primary);
			if (p1)
				return p1;
			p1 = Parse_Primary_1(p0);
			if (!p1)
			{
				p1 = Parse_Primary_2(p0);
				if (!p1)
				{
					p1 = Parse_Literal(p0);
					if (!p1)
					{
						p1 = Parse_Class(p0);
						if (!p1)
						{
							p1 = Parse_DOT(p0);
						}
					}
				}
			}
			SetEnd(p0, PTNodeType_Primary, p1);
			return p1;
		}

		PTNode* Parse_Primary_1(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Primary_1);
			if (p1)
				return p1;
			p1 = Parse_Identifier(p0);
			if (p1)
			{
				p1 = Parse_Spacing(p1);
				if (p1)
				{
					PTNode* p2 = Parse_LEFTARROW(p1);
					p1 = p2 ? 0 : p1;
				}
			}
			SetEnd(p0, PTNodeType_Primary_1, p1);
			return p1;
		}

		PTNode* Parse_Primary_2(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Primary_2);
			if (p1)
				return p1;
			p1 = Parse_OPEN(p0);
			if (p1)
			{
				p1 = Parse_Expression(p1);
				if (p1)
				{
					p1 = Parse_CLOSE(p1);
				}
			}
			SetEnd(p0, PTNodeType_Primary_2, p1);
			return p1;
		}

		PTNode* Parse_QUESTION(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_QUESTION);
			if (p1)
				return p1;
			p1 = ParseChar('?', p0);
			if (p1)
			{
				p1 = Parse_Spacing(p1);
			}
			SetEnd(p0, PTNodeType_QUESTION, p1);
			return p1;
		}

		PTNode* Parse_Range(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Range);
			if (p1)
				return p1;
			p1 = Parse_Char(p0);
			if (p1)
			{
				PTNode* p2 = Parse_Range_1(p1);
				p1 = p2 ? p2 : p1;
			}
			SetEnd(p0, PTNodeType_Range, p1);
			return p1;
		}

		PTNode* Parse_Range_1(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Range_1);
			if (p1)
				return p1;
			p1 = ParseChar('-', p0);
			if (p1)
			{
				p1 = Parse_Char(p1);
			}
			SetEnd(p0, PTNodeType_Range_1, p1);
			return p1;
		}

		PTNode* Parse_SLASH(PTNode* p0)
		{
			PTNode* p1 = ParseChar('/', p0);
			if (p1)
			{
				p1 = Parse_Spacing(p1);
			}
			return p1;
		}

		PTNode* Parse_STAR(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_STAR);
			if (p1)
				return p1;
			p1 = ParseChar('*', p0);
			if (p1)
			{
				p1 = Parse_Spacing(p1);
			}
			SetEnd(p0, PTNodeType_STAR, p1);
			return p1;
		}

		PTNode* Parse_Sequence(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Sequence);
			if (p1)
				return p1;
			p1 = p0;
			for (;;)
			{
				PTNode* p2 = Parse_Prefix(p1);
				if (!p2)
					break;
				p1 = p2;
			}
			SetEnd(p0, PTNodeType_Sequence, p1);
			return p1;
		}

		PTNode* Parse_Space(PTNode* p0)
		{
			PTNode* p1 = ParseChar(' ', p0);
			if (!p1)
			{
				p1 = ParseChar('\t', p0);
				if (!p1)
				{
					p1 = Parse_EndOfLine(p0);
				}
			}
			return p1;
		}

		PTNode* Parse_Spacing(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Spacing);
			if (p1)
				return p1;
			p1 = p0;
			for (;;)
			{
				PTNode* p2 = Parse_Space(p1);
				if (!p2)
				{
					p2 = Parse_Comment(p1);
				}
				if (!p2)
					break;
				p1 = p2;
			}
			SetEnd(p0, PTNodeType_Spacing, p1);
			return p1;
		}

		PTNode* Parse_Suffix(PTNode* p0)
		{
			PTNode* p1 = GetEnd(p0, PTNodeType_Suffix);
			if (p1)
				return p1;
			p1 = Parse_Primary(p0);
			if (p1)
			{
				PTNode* p2 = Parse_QUESTION(p1);
				if (!p2)
				{
					p2 = Parse_STAR(p1);
					if (!p2)
					{
						p2 = Parse_PLUS(p1);
					}
				}
				p1 = p2 ? p2 : p1;
			}
			SetEnd(p0, PTNodeType_Suffix, p1);
			return p1;
		}

		PTNode* Traverse_AND(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_CLOSE(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Char(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Class(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Class_1(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Comment(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_DOT(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Definition(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_EndOfFile(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_EndOfLine(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Expression(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Expression_1(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Grammar(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Identifier(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_LEFTARROW(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Literal(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Literal_1(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Literal_1_1(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Literal_2(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Literal_2_1(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_NOT(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_OPEN(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_PLUS(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Prefix(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Primary(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Primary_1(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Primary_2(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_QUESTION(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Range(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Range_1(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_SLASH(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_STAR(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Sequence(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Space(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Spacing(PTNode*, PTNodeVisitor&);
		PTNode* Traverse_Suffix(PTNode*, PTNodeVisitor&);

		PTNode* Traverse_AND(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_AND))
				return 0;
			PTNode* p1 = ParseChar('&', p0);
			if (p1)
			{
				p1 = GetEnd(p1, PTNodeType_Spacing);
			}
			return p1;
		}

		PTNode* Traverse_CLOSE(PTNode* p0, PTNodeVisitor& v)
		{
			PTNode* p1 = ParseChar(')', p0);
			if (p1)
			{
				p1 = GetEnd(p1, PTNodeType_Spacing);
			}
			return p1;
		}

		PTNode* Traverse_Char(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Char))
				return 0;
			PTNode* p1 = ParseChar('\\', p0);
			if (p1)
			{
				PTNode* p2 = ParseChar('n', p1);
				if (!p2)
				{
					p2 = ParseChar('r', p1);
					if (!p2)
					{
						p2 = ParseChar('t', p1);
						if (!p2)
						{
							p2 = ParseChar('\'', p1);
							if (!p2)
							{
								p2 = ParseChar('\"', p1);
								if (!p2)
								{
									p2 = ParseChar('[', p1);
									if (!p2)
									{
										p2 = ParseChar(']', p1);
										if (!p2)
										{
											p2 = ParseChar('\\', p1);
											if (!p2)
											{
												p2 = ParseRange('1', '9', p1);
												if (p2)
												{
													for (;;)
													{
														PTNode* p3 = ParseRange('0', '9', p2);
														if (!p3)
															break;
														p2 = p3;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				p1 = p2;
			}
			if (!p1)
			{
				p1 = ParseChar('\\', p0);
				p1 = p1 ? 0 : p0;
				if (p1)
				{
					p1 = ParseAnyChar(p1);
				}
			}
			return p1;
		}

		PTNode* Traverse_Class(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Class))
				return 0;
			PTNode* p1 = ParseChar('[', p0);
			if (p1)
			{
				for (;;)
				{
					PTNode* p2 = Traverse_Class_1(p1, v);
					if (!p2)
						break;
					p1 = p2;
				}
				if (p1)
				{
					p1 = ParseChar(']', p1);
					if (p1)
					{
						p1 = GetEnd(p1, PTNodeType_Spacing);
					}
				}
			}
			return p1;
		}

		PTNode* Traverse_Class_1(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Class_1))
				return 0;
			PTNode* p1 = ParseChar(']', p0);
			p1 = p1 ? 0 : p0;
			if (p1)
			{
				p1 = Visit(p1, PTNodeType_Range, v);
			}
			return p1;
		}

		PTNode* Traverse_Comment(PTNode* p0, PTNodeVisitor& v)
		{
			PTNode* p1 = ParseChar('#', p0);
			if (p1)
			{
				for (;;)
				{
					PTNode* p2 = Traverse_EndOfLine(p1, v);
					p2 = p2 ? 0 : p1;
					if (p2)
					{
						p2 = ParseAnyChar(p2);
					}
					if (!p2)
						break;
					p1 = p2;
				}
				if (p1)
				{
					p1 = Traverse_EndOfLine(p1, v);
				}
			}
			return p1;
		}

		PTNode* Traverse_DOT(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_DOT))
				return 0;
			PTNode* p1 = ParseChar('.', p0);
			if (p1)
			{
				p1 = GetEnd(p1, PTNodeType_Spacing);
			}
			return p1;
		}

		PTNode* Traverse_Definition(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Definition))
				return 0;
			PTNode* p1 = Visit(p0, PTNodeType_Identifier, v);
			if (p1)
			{
				p1 = GetEnd(p1, PTNodeType_Spacing);
				if (p1)
				{
					p1 = Visit(p1, PTNodeType_LEFTARROW, v);
					if (p1)
					{
						p1 = Visit(p1, PTNodeType_Expression, v);
					}
				}
			}
			return p1;
		}

		PTNode* Traverse_EndOfFile(PTNode* p0, PTNodeVisitor& v)
		{
			PTNode* p1 = ParseAnyChar(p0);
			p1 = p1 ? 0 : p0;
			return p1;
		}

		PTNode* Traverse_EndOfLine(PTNode* p0, PTNodeVisitor& v)
		{
			PTNode* p1 = ParseChar('\r', p0);
			if (p1)
			{
				p1 = ParseChar('\n', p1);
			}
			if (!p1)
			{
				p1 = ParseChar('\n', p0);
				if (!p1)
				{
					p1 = ParseChar('\r', p0);
				}
			}
			return p1;
		}

		PTNode* Traverse_Expression(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Expression))
				return 0;
			PTNode* p1 = Visit(p0, PTNodeType_Sequence, v);
			if (p1)
			{
				for (;;)
				{
					PTNode* p2 = Traverse_Expression_1(p1, v);
					if (!p2)
						break;
					p1 = p2;
				}
			}
			return p1;
		}

		PTNode* Traverse_Expression_1(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Expression_1))
				return 0;
			PTNode* p1 = Traverse_SLASH(p0, v);
			if (p1)
			{
				p1 = Visit(p1, PTNodeType_Sequence, v);
			}
			return p1;
		}

		PTNode* Traverse_Grammar(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Grammar))
				return 0;
			PTNode* p1 = GetEnd(p0, PTNodeType_Spacing);
			if (p1)
			{
				p1 = Visit(p1, PTNodeType_Definition, v);
				if (p1)
				{
					for (;;)
					{
						PTNode* p2 = Visit(p1, PTNodeType_Definition, v);
						if (!p2)
							break;
						p1 = p2;
					}
					if (p1)
					{
						p1 = Traverse_EndOfFile(p1, v);
					}
				}
			}
			return p1;
		}

		PTNode* Traverse_Identifier(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Identifier))
				return 0;
			PTNode* p1 = ParseRange('a', 'z', p0);
			if (!p1)
			{
				p1 = ParseRange('A', 'Z', p0);
				if (!p1)
				{
					p1 = ParseChar('_', p0);
				}
			}
			if (p1)
			{
				for (;;)
				{
					PTNode* p2 = ParseRange('a', 'z', p1);
					if (!p2)
					{
						p2 = ParseRange('A', 'Z', p1);
						if (!p2)
						{
							p2 = ParseRange('0', '9', p1);
							if (!p2)
							{
								p2 = ParseChar('_', p1);
							}
						}
					}
					if (!p2)
						break;
					p1 = p2;
				}
			}
			return p1;
		}

		PTNode* Traverse_LEFTARROW(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_LEFTARROW))
				return 0;
			PTNode* p1 = ParseChar('<', p0);
			if (p1)
			{
				PTNode* p2 = ParseChar('-', p1);
				if (!p2)
				{
					p2 = ParseChar('=', p1);
					if (!p2)
					{
						p2 = ParseChar('<', p1);
					}
				}
				if (p2)
				{
					p1 = GetEnd(p2, PTNodeType_Spacing);
				}
			}
			return p1;
		}

		PTNode* Traverse_Literal(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Literal))
				return 0;
			PTNode* p1 = Traverse_Literal_1(p0, v);
			if (!p1)
			{
				p1 = Traverse_Literal_2(p0, v);
			}
			return p1;
		}

		PTNode* Traverse_Literal_1(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Literal_1))
				return 0;
			PTNode* p1 = ParseChar('\'', p0);
			if (p1)
			{
				for (;;)
				{
					PTNode* p2 = Traverse_Literal_1_1(p1, v);
					if (!p2)
						break;
					p1 = p2;
				}
				if (p1)
				{
					p1 = ParseChar('\'', p1);
					if (p1)
					{
						p1 = GetEnd(p1, PTNodeType_Spacing);
					}
				}
			}
			return p1;
		}

		PTNode* Traverse_Literal_1_1(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Literal_1_1))
				return 0;
			PTNode* p1 = ParseChar('\'', p0);
			p1 = p1 ? 0 : p0;
			if (p1)
			{
				p1 = Visit(p1, PTNodeType_Char, v);
			}
			return p1;
		}

		PTNode* Traverse_Literal_2(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Literal_2))
				return 0;
			PTNode* p1 = ParseChar('\"', p0);
			if (p1)
			{
				for (;;)
				{
					PTNode* p2 = Traverse_Literal_2_1(p1, v);
					if (!p2)
						break;
					p1 = p2;
				}
				if (p1)
				{
					p1 = ParseChar('\"', p1);
					if (p1)
					{
						p1 = GetEnd(p1, PTNodeType_Spacing);
					}
				}
			}
			return p1;
		}

		PTNode* Traverse_Literal_2_1(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Literal_2_1))
				return 0;
			PTNode* p1 = ParseChar('\"', p0);
			p1 = p1 ? 0 : p0;
			if (p1)
			{
				p1 = Visit(p1, PTNodeType_Char, v);
			}
			return p1;
		}

		PTNode* Traverse_NOT(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_NOT))
				return 0;
			PTNode* p1 = ParseChar('!', p0);
			if (p1)
			{
				p1 = GetEnd(p1, PTNodeType_Spacing);
			}
			return p1;
		}

		PTNode* Traverse_OPEN(PTNode* p0, PTNodeVisitor& v)
		{
			PTNode* p1 = ParseChar('(', p0);
			if (p1)
			{
				p1 = GetEnd(p1, PTNodeType_Spacing);
			}
			return p1;
		}

		PTNode* Traverse_PLUS(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_PLUS))
				return 0;
			PTNode* p1 = ParseChar('+', p0);
			if (p1)
			{
				p1 = GetEnd(p1, PTNodeType_Spacing);
			}
			return p1;
		}

		PTNode* Traverse_Prefix(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Prefix))
				return 0;
			PTNode* p1 = GetEnd(p0, PTNodeType_AND);
			if (!p1)
			{
				p1 = GetEnd(p0, PTNodeType_NOT);
			}
			p1 = p1 ? p1 : p0;
			if (p1)
			{
				p1 = Visit(p1, PTNodeType_Suffix, v);
			}
			return p1;
		}

		PTNode* Traverse_Primary(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Primary))
				return 0;
			PTNode* p1 = Traverse_Primary_1(p0, v);
			if (!p1)
			{
				p1 = Traverse_Primary_2(p0, v);
				if (!p1)
				{
					p1 = Visit(p0, PTNodeType_Literal, v);
					if (!p1)
					{
						p1 = Visit(p0, PTNodeType_Class, v);
						if (!p1)
						{
							p1 = GetEnd(p0, PTNodeType_DOT);
						}
					}
				}
			}
			return p1;
		}

		PTNode* Traverse_Primary_1(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Primary_1))
				return 0;
			PTNode* p1 = Visit(p0, PTNodeType_Identifier, v);
			if (p1)
			{
				p1 = GetEnd(p1, PTNodeType_Spacing);
				if (p1)
				{
					PTNode* p2 = Visit(p1, PTNodeType_LEFTARROW, v);
					p1 = p2 ? 0 : p1;
				}
			}
			return p1;
		}

		PTNode* Traverse_Primary_2(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Primary_2))
				return 0;
			PTNode* p1 = Traverse_OPEN(p0, v);
			if (p1)
			{
				p1 = Visit(p1, PTNodeType_Expression, v);
				if (p1)
				{
					p1 = Traverse_CLOSE(p1, v);
				}
			}
			return p1;
		}

		PTNode* Traverse_QUESTION(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_QUESTION))
				return 0;
			PTNode* p1 = ParseChar('?', p0);
			if (p1)
			{
				p1 = GetEnd(p1, PTNodeType_Spacing);
			}
			return p1;
		}

		PTNode* Traverse_Range(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Range))
				return 0;
			PTNode* p1 = Visit(p0, PTNodeType_Char, v);
			if (p1)
			{
				PTNode* p2 = Traverse_Range_1(p1, v);
				p1 = p2 ? p2 : p1;
			}
			return p1;
		}

		PTNode* Traverse_Range_1(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Range_1))
				return 0;
			PTNode* p1 = ParseChar('-', p0);
			if (p1)
			{
				p1 = Visit(p1, PTNodeType_Char, v);
			}
			return p1;
		}

		PTNode* Traverse_SLASH(PTNode* p0, PTNodeVisitor& v)
		{
			PTNode* p1 = ParseChar('/', p0);
			if (p1)
			{
				p1 = GetEnd(p1, PTNodeType_Spacing);
			}
			return p1;
		}

		PTNode* Traverse_STAR(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_STAR))
				return 0;
			PTNode* p1 = ParseChar('*', p0);
			if (p1)
			{
				p1 = GetEnd(p1, PTNodeType_Spacing);
			}
			return p1;
		}

		PTNode* Traverse_Sequence(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Sequence))
				return 0;
			PTNode* p1 = p0;
			for (;;)
			{
				PTNode* p2 = Visit(p1, PTNodeType_Prefix, v);
				if (!p2)
					break;
				p1 = p2;
			}
			return p1;
		}

		PTNode* Traverse_Space(PTNode* p0, PTNodeVisitor& v)
		{
			PTNode* p1 = ParseChar(' ', p0);
			if (!p1)
			{
				p1 = ParseChar('\t', p0);
				if (!p1)
				{
					p1 = Traverse_EndOfLine(p0, v);
				}
			}
			return p1;
		}

		PTNode* Traverse_Spacing(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Spacing))
				return 0;
			PTNode* p1 = p0;
			for (;;)
			{
				PTNode* p2 = Traverse_Space(p1, v);
				if (!p2)
				{
					p2 = Traverse_Comment(p1, v);
				}
				if (!p2)
					break;
				p1 = p2;
			}
			return p1;
		}

		PTNode* Traverse_Suffix(PTNode* p0, PTNodeVisitor& v)
		{
			if (!GetEnd(p0, PTNodeType_Suffix))
				return 0;
			PTNode* p1 = Visit(p0, PTNodeType_Primary, v);
			if (p1)
			{
				PTNode* p2 = GetEnd(p1, PTNodeType_QUESTION);
				if (!p2)
				{
					p2 = GetEnd(p1, PTNodeType_STAR);
					if (!p2)
					{
						p2 = GetEnd(p1, PTNodeType_PLUS);
					}
				}
				p1 = p2 ? p2 : p1;
			}
			return p1;
		}
	}

	PTNode* Parse(PTNodeType _type, PTNode* _symbol)
	{
		switch (_type)
		{
			case PTNodeType_AND: return Parse_AND(_symbol);
			case PTNodeType_CLOSE: return Parse_CLOSE(_symbol);
			case PTNodeType_Char: return Parse_Char(_symbol);
			case PTNodeType_Class: return Parse_Class(_symbol);
			case PTNodeType_Class_1: return Parse_Class_1(_symbol);
			case PTNodeType_Comment: return Parse_Comment(_symbol);
			case PTNodeType_DOT: return Parse_DOT(_symbol);
			case PTNodeType_Definition: return Parse_Definition(_symbol);
			case PTNodeType_EndOfFile: return Parse_EndOfFile(_symbol);
			case PTNodeType_EndOfLine: return Parse_EndOfLine(_symbol);
			case PTNodeType_Expression: return Parse_Expression(_symbol);
			case PTNodeType_Expression_1: return Parse_Expression_1(_symbol);
			case PTNodeType_Grammar: return Parse_Grammar(_symbol);
			case PTNodeType_Identifier: return Parse_Identifier(_symbol);
			case PTNodeType_LEFTARROW: return Parse_LEFTARROW(_symbol);
			case PTNodeType_Literal: return Parse_Literal(_symbol);
			case PTNodeType_Literal_1: return Parse_Literal_1(_symbol);
			case PTNodeType_Literal_1_1: return Parse_Literal_1_1(_symbol);
			case PTNodeType_Literal_2: return Parse_Literal_2(_symbol);
			case PTNodeType_Literal_2_1: return Parse_Literal_2_1(_symbol);
			case PTNodeType_NOT: return Parse_NOT(_symbol);
			case PTNodeType_OPEN: return Parse_OPEN(_symbol);
			case PTNodeType_PLUS: return Parse_PLUS(_symbol);
			case PTNodeType_Prefix: return Parse_Prefix(_symbol);
			case PTNodeType_Primary: return Parse_Primary(_symbol);
			case PTNodeType_Primary_1: return Parse_Primary_1(_symbol);
			case PTNodeType_Primary_2: return Parse_Primary_2(_symbol);
			case PTNodeType_QUESTION: return Parse_QUESTION(_symbol);
			case PTNodeType_Range: return Parse_Range(_symbol);
			case PTNodeType_Range_1: return Parse_Range_1(_symbol);
			case PTNodeType_SLASH: return Parse_SLASH(_symbol);
			case PTNodeType_STAR: return Parse_STAR(_symbol);
			case PTNodeType_Sequence: return Parse_Sequence(_symbol);
			case PTNodeType_Space: return Parse_Space(_symbol);
			case PTNodeType_Spacing: return Parse_Spacing(_symbol);
			case PTNodeType_Suffix: return Parse_Suffix(_symbol);
		}
		return 0;
	}

	PTNode* Traverse(PTNodeType _type, PTNode* _symbol, PTNodeVisitor& _visitor)
	{
		switch (_type)
		{
			case PTNodeType_AND: return Traverse_AND(_symbol, _visitor);
			case PTNodeType_CLOSE: return Traverse_CLOSE(_symbol, _visitor);
			case PTNodeType_Char: return Traverse_Char(_symbol, _visitor);
			case PTNodeType_Class: return Traverse_Class(_symbol, _visitor);
			case PTNodeType_Class_1: return Traverse_Class_1(_symbol, _visitor);
			case PTNodeType_Comment: return Traverse_Comment(_symbol, _visitor);
			case PTNodeType_DOT: return Traverse_DOT(_symbol, _visitor);
			case PTNodeType_Definition: return Traverse_Definition(_symbol, _visitor);
			case PTNodeType_EndOfFile: return Traverse_EndOfFile(_symbol, _visitor);
			case PTNodeType_EndOfLine: return Traverse_EndOfLine(_symbol, _visitor);
			case PTNodeType_Expression: return Traverse_Expression(_symbol, _visitor);
			case PTNodeType_Expression_1: return Traverse_Expression_1(_symbol, _visitor);
			case PTNodeType_Grammar: return Traverse_Grammar(_symbol, _visitor);
			case PTNodeType_Identifier: return Traverse_Identifier(_symbol, _visitor);
			case PTNodeType_LEFTARROW: return Traverse_LEFTARROW(_symbol, _visitor);
			case PTNodeType_Literal: return Traverse_Literal(_symbol, _visitor);
			case PTNodeType_Literal_1: return Traverse_Literal_1(_symbol, _visitor);
			case PTNodeType_Literal_1_1: return Traverse_Literal_1_1(_symbol, _visitor);
			case PTNodeType_Literal_2: return Traverse_Literal_2(_symbol, _visitor);
			case PTNodeType_Literal_2_1: return Traverse_Literal_2_1(_symbol, _visitor);
			case PTNodeType_NOT: return Traverse_NOT(_symbol, _visitor);
			case PTNodeType_OPEN: return Traverse_OPEN(_symbol, _visitor);
			case PTNodeType_PLUS: return Traverse_PLUS(_symbol, _visitor);
			case PTNodeType_Prefix: return Traverse_Prefix(_symbol, _visitor);
			case PTNodeType_Primary: return Traverse_Primary(_symbol, _visitor);
			case PTNodeType_Primary_1: return Traverse_Primary_1(_symbol, _visitor);
			case PTNodeType_Primary_2: return Traverse_Primary_2(_symbol, _visitor);
			case PTNodeType_QUESTION: return Traverse_QUESTION(_symbol, _visitor);
			case PTNodeType_Range: return Traverse_Range(_symbol, _visitor);
			case PTNodeType_Range_1: return Traverse_Range_1(_symbol, _visitor);
			case PTNodeType_SLASH: return Traverse_SLASH(_symbol, _visitor);
			case PTNodeType_STAR: return Traverse_STAR(_symbol, _visitor);
			case PTNodeType_Sequence: return Traverse_Sequence(_symbol, _visitor);
			case PTNodeType_Space: return Traverse_Space(_symbol, _visitor);
			case PTNodeType_Spacing: return Traverse_Spacing(_symbol, _visitor);
			case PTNodeType_Suffix: return Traverse_Suffix(_symbol, _visitor);
		}
		return 0;
	}
}
