// This file was automatically generated by IPG
// DO NOT EDIT!
#ifndef PEGPARSER_H
#define PEGPARSER_H

#include <vector>
#include <map>

namespace PEGParser
{
	enum PTNodeType
	{
		PTNodeType_AND = 1,
		PTNodeType_CLOSE = 2,
		PTNodeType_Char = 3,
		PTNodeType_Class = 4,
		PTNodeType_Comment = 5,
		PTNodeType_DOT = 6,
		PTNodeType_Definition = 7,
		PTNodeType_EndOfFile = 8,
		PTNodeType_EndOfLine = 9,
		PTNodeType_Expression = 10,
		PTNodeType_Grammar = 11,
		PTNodeType_Identifier = 12,
		PTNodeType_LEFTARROW = 13,
		PTNodeType_Literal = 14,
		PTNodeType_NOT = 15,
		PTNodeType_OPEN = 16,
		PTNodeType_PLUS = 17,
		PTNodeType_Prefix = 18,
		PTNodeType_Primary = 19,
		PTNodeType_QUESTION = 20,
		PTNodeType_Range = 21,
		PTNodeType_SLASH = 22,
		PTNodeType_STAR = 23,
		PTNodeType_Sequence = 24,
		PTNodeType_Space = 25,
		PTNodeType_Spacing = 26,
		PTNodeType_Suffix = 27,
	};

	struct Node;
	typedef std::map<PTNodeType, Node*> PTNodeTypeToPtr;

	struct Node
	{
		char value;
		PTNodeTypeToPtr end;
	};

	typedef std::pair<PTNodeType, Node*> PTNodeChild;
	typedef std::vector<PTNodeChild> PTNodeChildren;

	Node* Parse(PTNodeType _type, Node* _symbol);
	Node* Traverse(PTNodeType _type, Node* _symbol, PTNodeChildren& _children);
	const char* SymbolName(PTNodeType _type);
	void Print(std::ostream& _os, PTNodeType _type, Node* _pNode, int _tabs = 0, int _maxLineSize = 100);
}

#endif
